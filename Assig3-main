// CS 0445 Spring 2015
// Assignment 3
// Akila Brian Amaratunga
// This finds a phrase in a word search by using recursion

import java.io.*;
import java.util.*;

public class Assig3 {

    private static int[][] startPoints; //Store start coordinates of each word
    private static int[][] endPoints; //Store end coordinates of each word
    //[][0] are x coordinates; [][1] are y coordinates

    public static void main(String[] args) {
        Scanner input = new Scanner(System.in);
        Scanner fReader;
        File fName;
        String fString = "", phrase = "";

        // Make sure the file name is valid
        while (true) {
            try {
                System.out.println("Please enter grid filename:");
                fString = input.nextLine();
                fName = new File(fString);
                fReader = new Scanner(fName);

                break;
            } catch (IOException e) {
                System.out.println("Problem " + e);
            }
        }

        // Parse input file to create 2-d grid of characters
        String[] dims = (fReader.nextLine()).split(" ");
        int rows = Integer.parseInt(dims[0]);
        int cols = Integer.parseInt(dims[1]);

        char[][] theBoard = new char[rows][cols];

        for (int i = 0; i < rows; i++) {
            String rowString = fReader.nextLine();
            for (int j = 0; j < rowString.length(); j++) {
                theBoard[i][j] = Character.toLowerCase(rowString.charAt(j));
            }
        }

        // Show user the grid
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                System.out.print(theBoard[i][j] + " ");
            }
            System.out.println();
        }

        System.out.println("Please enter the phrase to search for (separated by single spaces):");
        phrase = (input.nextLine()).toLowerCase();
        while (!(phrase.equals(""))) {
            String[] words;
            words = phrase.split(" ");
            startPoints = new int[words.length][2];
            endPoints = new int[words.length][2];
            System.out.println("Looking for: " + phrase);
            System.out.println("containing " + words.length + " words");

            // Search for the phrase
            boolean found = false;
            for (int r = 0; (r < rows && !found); r++) {
                for (int c = 0; (c < cols && !found); c++) {
                    // first match first letter of first word before running recursion search
                    // search in each direction if not found
                    if (words[0].charAt(0) == theBoard[r][c]) {
                        found = findPhrase(r, c, words, 0, theBoard, "right");
                        if (!found) {
                            found = findPhrase(r, c, words, 0, theBoard, "down");
                        }
                        if (!found) {
                            found = findPhrase(r, c, words, 0, theBoard, "left");
                        }
                        if (!found) {
                            found = findPhrase(r, c, words, 0, theBoard, "up");
                        }
                    }

                }
            }

            if (found) {
                System.out.println("The phrase: " + phrase);
                System.out.println("was found:");
                //loop to print out all coordinate of words
                for (int i = 0; i < words.length; i++) {
                    System.out.println(words[i] + ": (" + startPoints[i][0] + "," + startPoints[i][1] + ") to (" + endPoints[i][0] + "," + endPoints[i][1] + ")");
                }

                //display board with found words capitalized
                //make found words lowercase after displayed
                for (int i = 0; i < rows; i++) {
                    for (int j = 0; j < cols; j++) {
                        System.out.print(theBoard[i][j] + " ");
                        theBoard[i][j] = Character.toLowerCase(theBoard[i][j]);
                    }
                    System.out.println();
                }
            } else {
                System.out.println("The phrase: " + phrase);
                System.out.println("was not found");
            }

            System.out.println("Please enter the phrase to search for (separated by single spaces):");
            phrase = (input.nextLine()).toLowerCase();
        }
    }

    //method to find phrase recursively
    public static boolean findPhrase(int r, int c, String[] words, int loc, char[][] bo, String dir) {
        boolean answer = false, found = false;
        //phrase not found if at illegal position on board
        if (r >= bo.length || r < 0 || c >= bo[0].length || c < 0) {
            return false;
        } else if (loc == words.length) { //base case - found last word so return true; you found the phrase!
            return true;
        } else //still have to find words :(
        {
            //depending on direction, call appropriate method to find a single word in that direction
            if (dir.equals("right")) {
                found = findWordRight(r, c, words[loc], bo, loc);
            } else if (dir.equals("down")) {
                found = findWordDown(r, c, words[loc], bo, loc);
            } else if (dir.equals("left")) {
                found = findWordLeft(r, c, words[loc], bo, loc);
            } else {
                found = findWordUp(r, c, words[loc], bo, loc);
            }
            //only enter this if single word was found
            if (found) {
                //recurse to find next word either right, down, left, or right
                //use endPoints of last found word as starting point for next method call
                answer = findPhrase(endPoints[loc][0], endPoints[loc][1] + 1, words, loc + 1, bo, "right");
                if (!answer) {
                    answer = findPhrase(endPoints[loc][0] + 1, endPoints[loc][1], words, loc + 1, bo, "down");
                }
                if (!answer) {
                    answer = findPhrase(endPoints[loc][0], endPoints[loc][1] - 1, words, loc + 1, bo, "left");
                }
                if (!answer) {
                    answer = findPhrase(endPoints[loc][0] - 1, endPoints[loc][1], words, loc + 1, bo, "up");
                }
                if (!answer) { //if still not found, make letters on board lowercase; program will now backtrack to last found word
                            //these if statements are for using startPoints and endPoints to loop to make characters lowercase
                    if (startPoints[loc][0] == endPoints[loc][0] && startPoints[loc][1] > endPoints[loc][1]) {
                        for (int i = startPoints[loc][1]; i >= endPoints[loc][1]; i--) {
                            bo[startPoints[loc][0]][i] = Character.toLowerCase(bo[startPoints[loc][0]][i]);
                        }
                    } else if (startPoints[loc][0] == endPoints[loc][0] && startPoints[loc][1] < endPoints[loc][1]) {
                        for (int i = startPoints[loc][1]; i <= endPoints[loc][1]; i++) {
                            bo[startPoints[loc][0]][i] = Character.toLowerCase(bo[startPoints[loc][0]][i]);
                        }
                    } else if (startPoints[loc][1] == endPoints[loc][1] && startPoints[loc][0] > endPoints[loc][0]) {
                        for (int i = startPoints[loc][0]; i >= endPoints[loc][0]; i--) {
                            bo[i][startPoints[loc][1]] = Character.toLowerCase(bo[i][startPoints[loc][1]]);
                        }
                    } else if (startPoints[loc][1] == endPoints[loc][1] && startPoints[loc][0] < endPoints[loc][0]) {
                        for (int i = startPoints[loc][0]; i <= endPoints[loc][0]; i++) {
                            bo[i][startPoints[loc][1]] = Character.toLowerCase(bo[i][startPoints[loc][1]]);
                        }
                    }
                }
            } else { //findPhrase returns false if single word not found
                return false;
            }

        }
        return answer;
    }

    //method to find single word to the right
    public static boolean findWordRight(int r, int c, String word, char[][] bo, int loc) {
        int startX = r, startY = c, endX, endY;//store coordinates of single word
        if (bo[r][c] == word.charAt(0)) { //match first letter
            int i = 1;
            while (i < word.length() && c + i < bo[0].length) { //continue matching letters in same direction using loop
                if (bo[r][c + i] != word.charAt(i)) {
                    return false;
                }
                i++;
            }
            if (c + i > bo[0].length || i < word.length()) { //if loops was exited because of illegal position on board
                                                            //or if the whole word wasn't found bc board space ran out,
                                                            //return false; you didn't find the word
                return false;
            }
            endX = r;
            endY = c + i - 1;
            for (int j = startY; j <= endY; j++) { //make the letters on the board upper case
                bo[r][j] = Character.toUpperCase(bo[r][j]);
            }
        } else {//didn't find word
            return false;
        }
        //store coordinates in global variable
        startPoints[loc][0] = startX;
        startPoints[loc][1] = startY;
        endPoints[loc][0] = endX;
        endPoints[loc][1] = endY;

        return true;
    }

    //method to find single word to the left
    //see comments for findWordRight for the basic concept
    public static boolean findWordLeft(int r, int c, String word, char[][] bo, int loc) {
        int startX = r, startY = c, endX, endY;
        if (bo[r][c] == word.charAt(0)) {
            int i = 1;
            while (i < word.length() && c - i >= 0) {
                if (bo[r][c - i] != word.charAt(i)) {
                    return false;
                }
                i++;
            }
            if (c - i < -1 || i < word.length()) {
                return false;
            }
            endX = r;
            endY = c - i + 1;
            for (int j = startY; j >= endY; j--) {
                bo[r][j] = Character.toUpperCase(bo[r][j]);
            }
        } else {
            return false;
        }
        startPoints[loc][0] = startX;
        startPoints[loc][1] = startY;
        endPoints[loc][0] = endX;
        endPoints[loc][1] = endY;
        return true;
    }

    //method to find single word upwards
    //see comments for findWordRight for the basic concept
    public static boolean findWordUp(int r, int c, String word, char[][] bo, int loc) {
        int startX = r, startY = c, endX, endY;
        if (bo[r][c] == word.charAt(0)) {
            int i = 2;
            while (i < word.length() && r - i >= 0) {
                if (bo[r - i][c] != word.charAt(i)) {
                    return false;
                }
                i++;
            }
            if (r - i < -1 || i < word.length()) {
                return false;
            }
            endX = r - i + 1;
            endY = c;
            for (int j = startX; j >= endX; j--) {
                bo[j][c] = Character.toUpperCase(bo[j][c]);
            }
        } else {
            return false;
        }
        startPoints[loc][0] = startX;
        startPoints[loc][1] = startY;
        endPoints[loc][0] = endX;
        endPoints[loc][1] = endY;
        return true;
    }

    //method to find single word downwards
    //see comments for findWordRight for the basic concept
    public static boolean findWordDown(int r, int c, String word, char[][] bo, int loc) {
        int startX = r, startY = c, endX, endY;
        if (bo[r][c] == word.charAt(0)) {
            int i = 2;
            while (i < word.length() && r + i < bo.length) {
                if (bo[r + i][c] != word.charAt(i)) {
                    return false;
                }
                i++;
            }
            if (r + i > bo.length || i < word.length()) {
                return false;
            }
            endX = r + i - 1;
            endY = c;
            for (int j = startX; j <= endX; j++) {
                bo[j][c] = Character.toUpperCase(bo[j][c]);
            }
        } else {
            return false;
        }
        startPoints[loc][0] = startX;
        startPoints[loc][1] = startY;
        endPoints[loc][0] = endX;
        endPoints[loc][1] = endY;
        return true;
    }
}
